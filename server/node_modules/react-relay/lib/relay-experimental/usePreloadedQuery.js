/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @emails oncall+relay
 * 
 * @format
 */
'use strict';

var invariant = require("fbjs/lib/invariant");

var useLazyLoadQueryNode = require('./useLazyLoadQueryNode');

var useMemoOperationDescriptor = require('./useMemoOperationDescriptor');

var useRelayEnvironment = require('./useRelayEnvironment');

var _require = require('relay-runtime'),
    fetchQueryDeduped = _require.__internal.fetchQueryDeduped;

function usePreloadedQuery(gqlQuery, preloadedQuery) {
  var environment = useRelayEnvironment();
  var fetchPolicy = preloadedQuery.fetchPolicy,
      fetchKey = preloadedQuery.fetchKey,
      source = preloadedQuery.source,
      variables = preloadedQuery.variables;
  var operation = useMemoOperationDescriptor(gqlQuery, variables);
  !(operation.request.node.params.name === preloadedQuery.name) ? process.env.NODE_ENV !== "production" ? invariant(false, 'usePreloadedQuery(): Expected data to be prefetched for query `%s`, ' + 'got prefetch results for query `%s`.', operation.request.node.params.name, preloadedQuery.name) : invariant(false) : void 0;
  var data = useLazyLoadQueryNode({
    componentDisplayName: 'usePreloadedQuery()',
    fetchKey: fetchKey,
    fetchObservable: fetchQueryDeduped(environment, operation.request, function () {
      if (environment === preloadedQuery.environment && source != null) {
        return environment.executeWithSource({
          operation: operation,
          source: source
        });
      } else {
        return environment.execute({
          operation: operation
        });
      }
    }),
    fetchPolicy: fetchPolicy,
    query: operation
  });
  return data;
}

module.exports = usePreloadedQuery;